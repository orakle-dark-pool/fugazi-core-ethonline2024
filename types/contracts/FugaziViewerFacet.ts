/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type PermissionStruct = { publicKey: BytesLike; signature: BytesLike };

export type PermissionStructOutput = [publicKey: string, signature: string] & {
  publicKey: string;
  signature: string;
};

export declare namespace FugaziStorageLayout {
  export type UnclaimedOrderStructStruct = {
    poolId: BytesLike;
    epoch: BigNumberish;
  };

  export type UnclaimedOrderStructStructOutput = [
    poolId: string,
    epoch: bigint
  ] & { poolId: string; epoch: bigint };

  export type UnclaimedOrderForViewerStructStruct = {
    poolId: BytesLike;
    orderEpoch: BigNumberish;
    poolEpoch: BigNumberish;
    lastSettlement: BigNumberish;
  };

  export type UnclaimedOrderForViewerStructStructOutput = [
    poolId: string,
    orderEpoch: bigint,
    poolEpoch: bigint,
    lastSettlement: bigint
  ] & {
    poolId: string;
    orderEpoch: bigint;
    poolEpoch: bigint;
    lastSettlement: bigint;
  };
}

export interface FugaziViewerFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eip712Domain"
      | "getBalance"
      | "getLPBalance"
      | "getPoolId"
      | "getPoolInfo"
      | "getUnclaimedOrder"
      | "getUnclaimedOrders"
      | "getUnclaimedOrdersLength"
      | "getUnclaimedProtocolOrder"
      | "getUnclaimedProtocolOrdersLength"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Donation"
      | "EIP712DomainChanged"
      | "Harvest"
      | "PoolCreated"
      | "Withdraw"
      | "batchSettled"
      | "facetAdded"
      | "liquidityRemoved"
      | "orderClaimed"
      | "orderSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPBalance",
    values: [AddressLike, AddressLike, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolId",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedOrdersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedProtocolOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedProtocolOrdersLength",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLPBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedProtocolOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedProtocolOrdersLength",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [recipient: AddressLike, token: AddressLike];
  export type OutputTuple = [recipient: string, token: string];
  export interface OutputObject {
    recipient: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationEvent {
  export type InputTuple = [poolId: BytesLike];
  export type OutputTuple = [poolId: string];
  export interface OutputObject {
    poolId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [poolId: BytesLike];
  export type OutputTuple = [poolId: string];
  export interface OutputObject {
    poolId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    tokenX: AddressLike,
    tokenY: AddressLike,
    poolId: BytesLike
  ];
  export type OutputTuple = [tokenX: string, tokenY: string, poolId: string];
  export interface OutputObject {
    tokenX: string;
    tokenY: string;
    poolId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [recipient: AddressLike, token: AddressLike];
  export type OutputTuple = [recipient: string, token: string];
  export interface OutputObject {
    recipient: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace batchSettledEvent {
  export type InputTuple = [poolId: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [poolId: string, epoch: bigint];
  export interface OutputObject {
    poolId: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace facetAddedEvent {
  export type InputTuple = [selector: BytesLike, facet: AddressLike];
  export type OutputTuple = [selector: string, facet: string];
  export interface OutputObject {
    selector: string;
    facet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace liquidityRemovedEvent {
  export type InputTuple = [poolId: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [poolId: string, epoch: bigint];
  export interface OutputObject {
    poolId: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace orderClaimedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    epoch: BigNumberish,
    claimer: AddressLike
  ];
  export type OutputTuple = [poolId: string, epoch: bigint, claimer: string];
  export interface OutputObject {
    poolId: string;
    epoch: bigint;
    claimer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace orderSubmittedEvent {
  export type InputTuple = [poolId: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [poolId: string, epoch: bigint];
  export interface OutputObject {
    poolId: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FugaziViewerFacet extends BaseContract {
  connect(runner?: ContractRunner | null): FugaziViewerFacet;
  waitForDeployment(): Promise<this>;

  interface: FugaziViewerFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getBalance: TypedContractMethod<
    [token: AddressLike, permission: PermissionStruct],
    [string],
    "view"
  >;

  getLPBalance: TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike, permission: PermissionStruct],
    [string],
    "view"
  >;

  getPoolId: TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike],
    [string],
    "view"
  >;

  getPoolInfo: TypedContractMethod<
    [poolId: BytesLike],
    [[bigint, bigint]],
    "view"
  >;

  getUnclaimedOrder: TypedContractMethod<
    [index: BigNumberish],
    [FugaziStorageLayout.UnclaimedOrderStructStructOutput],
    "view"
  >;

  getUnclaimedOrders: TypedContractMethod<
    [],
    [FugaziStorageLayout.UnclaimedOrderForViewerStructStructOutput[]],
    "view"
  >;

  getUnclaimedOrdersLength: TypedContractMethod<[], [bigint], "view">;

  getUnclaimedProtocolOrder: TypedContractMethod<
    [index: BigNumberish],
    [FugaziStorageLayout.UnclaimedOrderStructStructOutput],
    "view"
  >;

  getUnclaimedProtocolOrdersLength: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [token: AddressLike, permission: PermissionStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLPBalance"
  ): TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike, permission: PermissionStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolId"
  ): TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<[poolId: BytesLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getUnclaimedOrder"
  ): TypedContractMethod<
    [index: BigNumberish],
    [FugaziStorageLayout.UnclaimedOrderStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedOrders"
  ): TypedContractMethod<
    [],
    [FugaziStorageLayout.UnclaimedOrderForViewerStructStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedOrdersLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnclaimedProtocolOrder"
  ): TypedContractMethod<
    [index: BigNumberish],
    [FugaziStorageLayout.UnclaimedOrderStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedProtocolOrdersLength"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Donation"
  ): TypedContractEvent<
    DonationEvent.InputTuple,
    DonationEvent.OutputTuple,
    DonationEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "batchSettled"
  ): TypedContractEvent<
    batchSettledEvent.InputTuple,
    batchSettledEvent.OutputTuple,
    batchSettledEvent.OutputObject
  >;
  getEvent(
    key: "facetAdded"
  ): TypedContractEvent<
    facetAddedEvent.InputTuple,
    facetAddedEvent.OutputTuple,
    facetAddedEvent.OutputObject
  >;
  getEvent(
    key: "liquidityRemoved"
  ): TypedContractEvent<
    liquidityRemovedEvent.InputTuple,
    liquidityRemovedEvent.OutputTuple,
    liquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "orderClaimed"
  ): TypedContractEvent<
    orderClaimedEvent.InputTuple,
    orderClaimedEvent.OutputTuple,
    orderClaimedEvent.OutputObject
  >;
  getEvent(
    key: "orderSubmitted"
  ): TypedContractEvent<
    orderSubmittedEvent.InputTuple,
    orderSubmittedEvent.OutputTuple,
    orderSubmittedEvent.OutputObject
  >;

  filters: {
    "Deposit(address,address)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Donation(bytes32)": TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;
    Donation: TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Harvest(bytes32)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "PoolCreated(address,address,bytes32)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "Withdraw(address,address)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "batchSettled(bytes32,uint32)": TypedContractEvent<
      batchSettledEvent.InputTuple,
      batchSettledEvent.OutputTuple,
      batchSettledEvent.OutputObject
    >;
    batchSettled: TypedContractEvent<
      batchSettledEvent.InputTuple,
      batchSettledEvent.OutputTuple,
      batchSettledEvent.OutputObject
    >;

    "facetAdded(bytes4,address)": TypedContractEvent<
      facetAddedEvent.InputTuple,
      facetAddedEvent.OutputTuple,
      facetAddedEvent.OutputObject
    >;
    facetAdded: TypedContractEvent<
      facetAddedEvent.InputTuple,
      facetAddedEvent.OutputTuple,
      facetAddedEvent.OutputObject
    >;

    "liquidityRemoved(bytes32,uint32)": TypedContractEvent<
      liquidityRemovedEvent.InputTuple,
      liquidityRemovedEvent.OutputTuple,
      liquidityRemovedEvent.OutputObject
    >;
    liquidityRemoved: TypedContractEvent<
      liquidityRemovedEvent.InputTuple,
      liquidityRemovedEvent.OutputTuple,
      liquidityRemovedEvent.OutputObject
    >;

    "orderClaimed(bytes32,uint32,address)": TypedContractEvent<
      orderClaimedEvent.InputTuple,
      orderClaimedEvent.OutputTuple,
      orderClaimedEvent.OutputObject
    >;
    orderClaimed: TypedContractEvent<
      orderClaimedEvent.InputTuple,
      orderClaimedEvent.OutputTuple,
      orderClaimedEvent.OutputObject
    >;

    "orderSubmitted(bytes32,uint32)": TypedContractEvent<
      orderSubmittedEvent.InputTuple,
      orderSubmittedEvent.OutputTuple,
      orderSubmittedEvent.OutputObject
    >;
    orderSubmitted: TypedContractEvent<
      orderSubmittedEvent.InputTuple,
      orderSubmittedEvent.OutputTuple,
      orderSubmittedEvent.OutputObject
    >;
  };
}
