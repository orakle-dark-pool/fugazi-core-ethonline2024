/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PermissionStruct = { publicKey: BytesLike; signature: BytesLike };

export type PermissionStructOutput = [publicKey: string, signature: string] & {
  publicKey: string;
  signature: string;
};

export type InEuint32Struct = { data: BytesLike };

export type InEuint32StructOutput = [data: string] & { data: string };

export interface IFHERC20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowanceEncrypted"
      | "approveEncrypted"
      | "balanceOfEncrypted"
      | "transferEncrypted(address,(bytes))"
      | "transferEncrypted(address,uint256)"
      | "transferFromEncrypted(address,address,(bytes))"
      | "transferFromEncrypted(address,address,uint256)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ApprovalEncrypted" | "TransferEncrypted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowanceEncrypted",
    values: [AddressLike, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approveEncrypted",
    values: [AddressLike, InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfEncrypted",
    values: [AddressLike, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEncrypted(address,(bytes))",
    values: [AddressLike, InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEncrypted(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromEncrypted(address,address,(bytes))",
    values: [AddressLike, AddressLike, InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromEncrypted(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowanceEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEncrypted(address,(bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEncrypted(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromEncrypted(address,address,(bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromEncrypted(address,address,uint256)",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEncryptedEvent {
  export type InputTuple = [owner: AddressLike, spender: AddressLike];
  export type OutputTuple = [owner: string, spender: string];
  export interface OutputObject {
    owner: string;
    spender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEncryptedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFHERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): IFHERC20;
  waitForDeployment(): Promise<this>;

  interface: IFHERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowanceEncrypted: TypedContractMethod<
    [spender: AddressLike, permission: PermissionStruct],
    [string],
    "view"
  >;

  approveEncrypted: TypedContractMethod<
    [spender: AddressLike, value: InEuint32Struct],
    [boolean],
    "nonpayable"
  >;

  balanceOfEncrypted: TypedContractMethod<
    [account: AddressLike, auth: PermissionStruct],
    [string],
    "view"
  >;

  "transferEncrypted(address,(bytes))": TypedContractMethod<
    [to: AddressLike, value: InEuint32Struct],
    [bigint],
    "nonpayable"
  >;

  "transferEncrypted(address,uint256)": TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "transferFromEncrypted(address,address,(bytes))": TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: InEuint32Struct],
    [bigint],
    "nonpayable"
  >;

  "transferFromEncrypted(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowanceEncrypted"
  ): TypedContractMethod<
    [spender: AddressLike, permission: PermissionStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "approveEncrypted"
  ): TypedContractMethod<
    [spender: AddressLike, value: InEuint32Struct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOfEncrypted"
  ): TypedContractMethod<
    [account: AddressLike, auth: PermissionStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferEncrypted(address,(bytes))"
  ): TypedContractMethod<
    [to: AddressLike, value: InEuint32Struct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferEncrypted(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFromEncrypted(address,address,(bytes))"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: InEuint32Struct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFromEncrypted(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalEncrypted"
  ): TypedContractEvent<
    ApprovalEncryptedEvent.InputTuple,
    ApprovalEncryptedEvent.OutputTuple,
    ApprovalEncryptedEvent.OutputObject
  >;
  getEvent(
    key: "TransferEncrypted"
  ): TypedContractEvent<
    TransferEncryptedEvent.InputTuple,
    TransferEncryptedEvent.OutputTuple,
    TransferEncryptedEvent.OutputObject
  >;

  filters: {
    "ApprovalEncrypted(address,address)": TypedContractEvent<
      ApprovalEncryptedEvent.InputTuple,
      ApprovalEncryptedEvent.OutputTuple,
      ApprovalEncryptedEvent.OutputObject
    >;
    ApprovalEncrypted: TypedContractEvent<
      ApprovalEncryptedEvent.InputTuple,
      ApprovalEncryptedEvent.OutputTuple,
      ApprovalEncryptedEvent.OutputObject
    >;

    "TransferEncrypted(address,address)": TypedContractEvent<
      TransferEncryptedEvent.InputTuple,
      TransferEncryptedEvent.OutputTuple,
      TransferEncryptedEvent.OutputObject
    >;
    TransferEncrypted: TypedContractEvent<
      TransferEncryptedEvent.InputTuple,
      TransferEncryptedEvent.OutputTuple,
      TransferEncryptedEvent.OutputObject
    >;
  };
}
